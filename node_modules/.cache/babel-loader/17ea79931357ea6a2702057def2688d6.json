{"ast":null,"code":"import config from './config'; // let config = new Config;\n\nexport default {\n  /**\r\n   * @param {string} historicalData display histoical data of selected company\r\n  */\n  displayHistoricalData: historicalData => {\n    const url = config.getBaseUrl + \"TIME_SERIES_DAILY_ADJUSTED&symbol=\" + historicalData + config.getBaseUrlForKey;\n    return fetch(url).then(response => response.json()).catch(err => ({\n      status: 500,\n      message: 'Internal Server Error' + err\n    }));\n  },\n\n  /**\r\n   * @param {object} intervalData selected interval value and get data of this \r\n   */\n  selectInterval: intervalData => {\n    if (intervalData.intervalValue == 'MONTHLY') {\n      const url = config.getBaseUrl + \"TIME_SERIES_MONTHLY&symbol=\" + intervalData.symbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n      return fetch(url).then(response => response.json()).catch(err => ({\n        status: 500,\n        message: 'Internal Server Error' + err\n      }));\n    } else if (intervalData.intervalValue == 'WEEKLY') {\n      const url = config.getBaseUrl + \"TIME_SERIES_WEEKLY&symbol=\" + intervalData.symbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n      return fetch(url).then(response => response.json()).catch({\n        status: 500,\n        message: 'Internal Server Error'\n      });\n    } else {\n      const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + intervalData.symbol + \"&name=apple&interval=\" + intervalData.intervalValue + config.getBaseUrlForKey;\n      return fetch(url).then(response => response.json()).catch(err => ({\n        status: 500,\n        message: 'Internal Server Error' + err\n      }));\n    }\n  },\n\n  /**@param {string} companySymbol selected company symbol from dropdown and get data*/\n  selectComparisonCompany: companySymbol => {\n    const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + companySymbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n    return fetch(url).then(response => response.json()).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /**\r\n   * @param {object} firstSelectedCompany first company symbol and get data of this \r\n   */\n  comparedCompanyData: firstSelectedCompany => {\n    const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + firstSelectedCompany + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n    return fetch(url).then(response => response.json()).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /**\r\n   * @param {object} indicatorData selected indicator data and get data of indicator \r\n   */\n  getSelectedIndicatorData: indicatorData => {\n    const url = config.getBaseUrl + indicatorData.indicatorValue + \"&symbol=\" + indicatorData.indicatorValue + \"&interval=monthly&time_period=10&series_type=open\" + config.getBaseUrlForKey;\n    return fetch(url).then(response => response.json()).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /**\r\n   * @param {*} companySymbol selected comapny symbol when page load and get data of company symbol \r\n   */\n  getApiData: companySymbol => {\n    const url = config.getBaseUrl + \"SYMBOL_SEARCH&keywords=\" + companySymbol + config.getBaseUrlForKey;\n    return fetch(url).then(response => response.json()).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /**\r\n   * @param {string} companySymbol first company symbol of watchlist or selcted company symbol for display graph \r\n   */\n  displaySelectedCompanyGraph: companySymbol => {\n    const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + companySymbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n    return fetch(url).then(response => response.json()).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  }\n};","map":{"version":3,"sources":["C:\\xampp\\htdocs\\stock_viewer\\src\\service.js"],"names":["config","displayHistoricalData","historicalData","url","getBaseUrl","getBaseUrlForKey","fetch","then","response","json","catch","err","status","message","selectInterval","intervalData","intervalValue","symbol","selectComparisonCompany","companySymbol","comparedCompanyData","firstSelectedCompany","getSelectedIndicatorData","indicatorData","indicatorValue","getApiData","displaySelectedCompanyGraph"],"mappings":"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","sourcesContent":["import config from './config';\r\n\r\n// let config = new Config;\r\n\r\nexport default {\r\n\r\n    /**\r\n     * @param {string} historicalData display histoical data of selected company\r\n    */\r\n    displayHistoricalData: (historicalData) => {\r\n        const url = config.getBaseUrl + \"TIME_SERIES_DAILY_ADJUSTED&symbol=\" + historicalData + config.getBaseUrlForKey;\r\n        return fetch(url)\r\n        .then((response) => response.json())\r\n        .catch((err) => ({ status: 500, message: 'Internal Server Error' +err }));\r\n    },\r\n\r\n    /**\r\n     * @param {object} intervalData selected interval value and get data of this \r\n     */\r\n    selectInterval: (intervalData) => {\r\n        if (intervalData.intervalValue == 'MONTHLY') {\r\n            const url = config.getBaseUrl + \"TIME_SERIES_MONTHLY&symbol=\" + intervalData.symbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\r\n            return fetch(url)\r\n                .then((response) => response.json())\r\n                .catch((err) => ({ status: 500, message: 'Internal Server Error' +err }));\r\n        } else if (intervalData.intervalValue == 'WEEKLY') {\r\n            const url = config.getBaseUrl + \"TIME_SERIES_WEEKLY&symbol=\" + intervalData.symbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\r\n            return fetch(url)\r\n                .then((response) => response.json())\r\n                .catch({ status: 500, message: 'Internal Server Error' });\r\n        } else {\r\n            const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + intervalData.symbol + \"&name=apple&interval=\" + intervalData.intervalValue + config.getBaseUrlForKey;\r\n            return fetch(url)\r\n                .then((response) => response.json())\r\n                 .catch((err) => ({ status: 500, message: 'Internal Server Error' +err }));\r\n        }\r\n    },\r\n\r\n    /**@param {string} companySymbol selected company symbol from dropdown and get data*/\r\n    selectComparisonCompany: (companySymbol) => {\r\n        const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + companySymbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\r\n        return fetch(url)\r\n            .then((response) => response.json())\r\n            .catch({ status: 500, message: 'Internal Server Error' });\r\n    },\r\n\r\n    /**\r\n     * @param {object} firstSelectedCompany first company symbol and get data of this \r\n     */\r\n    comparedCompanyData: (firstSelectedCompany) => {\r\n        const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + firstSelectedCompany + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\r\n        return fetch(url)\r\n            .then((response) => response.json())\r\n            .catch({ status: 500, message: 'Internal Server Error' });\r\n    },\r\n\r\n    /**\r\n     * @param {object} indicatorData selected indicator data and get data of indicator \r\n     */\r\n    getSelectedIndicatorData: (indicatorData) => {\r\n        const url = config.getBaseUrl + indicatorData.indicatorValue + \"&symbol=\" + indicatorData.indicatorValue + \"&interval=monthly&time_period=10&series_type=open\" + config.getBaseUrlForKey;\r\n        return fetch(url)\r\n            .then((response) => response.json())\r\n            .catch({ status: 500, message: 'Internal Server Error' });\r\n    },\r\n\r\n    /**\r\n     * @param {*} companySymbol selected comapny symbol when page load and get data of company symbol \r\n     */\r\n    getApiData: (companySymbol) => {\r\n        const url = config.getBaseUrl + \"SYMBOL_SEARCH&keywords=\" + companySymbol + config.getBaseUrlForKey;\r\n        return fetch(url)\r\n            .then((response) => response.json())\r\n            .catch({ status: 500, message: 'Internal Server Error' });\r\n    },\r\n\r\n    /**\r\n     * @param {string} companySymbol first company symbol of watchlist or selcted company symbol for display graph \r\n     */\r\n    displaySelectedCompanyGraph: (companySymbol) => {\r\n        const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + companySymbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\r\n        return fetch(url)\r\n            .then((response) => response.json())\r\n            .catch({ status: 500, message: 'Internal Server Error' });\r\n    },\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}